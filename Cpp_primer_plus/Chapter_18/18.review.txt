1.  double x = {8.8};
    std::string s = {"What a bracing effect!"};
    int k = {99};
    Z200 zip = {200, 'Z', 0.675};
    std::vector<int> ai = {3, 9, 4, 7, 1};
2.  r1: (1)valid, variable w (2)valid, temp variable initialized to 11.0 (3)valid, temp variable initialzed to number 20.0
    r2: (1)valid, variable w (2)invalid, rvalue can not bind to lvalue refs (3)invalid, rvalue can not bind to lvalue refs
    r3: (1)invalid, as rvalue reference can only bind to rvalue, not lvalue. (2)valid, number 11.0 (3) valid, number 20.0
3.  (a) double & rx
        const double & rx
        const double & rx
    (b) double & rx
        double && rx
        double && rx
    (c) const double & rx
        double && rx
        double && rx
4.  default constructor, copy constructor, move constructor, copy assignment operator, move assignment operator, desctrutor.
    They will have defaulted versions if not provided in definitions
5.  Because the object would have the space for 4000 double variables, instead of the pointer to the memory, which would make pilfering not possible.
    Use a pointer to the array instead
6.  show2(18.0, [](double x){return 1.8*x + 32;});
7.  double total = 0.0;
    std::array<double, Size> temp_c = {32.1, 34.3, 37.8, 35.2, 34.7};
    sum(temp_c, [&](double w){total += w;})
    std::cout << "total: " << total << '\n';
    return 0;